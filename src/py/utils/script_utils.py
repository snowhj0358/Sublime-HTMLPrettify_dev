# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
"""Various utility functions used by this plugin"""

from __future__ import print_function
from webbrowser import open_new_tab
from sublime import ok_cancel_dialog

from .constants import DIAGNOSTICS_MARKER_BEGIN, DIAGNOSTICS_MARKER_END
from .constants import PRETTIFIED_CODE_MARKER_BEGIN, PRETTIFIED_CODE_MARKER_END
from .paths import get_root_dir, get_plugin_user_dir, get_main_js_file
from .env_utils import get_node_path, run_command
from .window_utils import get_pref, open_sublime_settings


def run_main_js(args):
    """Runs the main node.js script and returns the generated output"""
    return run_command([get_node_path(), get_main_js_file()] + args)


def get_output_between(output, first, second):
    """Gets part of the output generated by the node.js scripts between two string markers"""
    start = output.find(first)
    end = output.find(second)
    return output[start + len(first) + 1:end - 1].decode("utf-8")


def get_diagnostics(output):
    """Gets the diagnostics part of the output generated by the node.js scripts"""
    start = DIAGNOSTICS_MARKER_BEGIN
    end = DIAGNOSTICS_MARKER_END
    return get_output_between(output, start, end)


def get_prettified_code(output):
    """Gets the prettified text part of the output generated by the node.js scripts"""
    start = PRETTIFIED_CODE_MARKER_BEGIN
    end = PRETTIFIED_CODE_MARKER_END
    return get_output_between(output, start, end)


def prettify(args):
    """Prettifies the code at the given file path"""
    stdout, stderr = run_main_js(args + [get_plugin_user_dir(), get_root_dir()])
    return get_prettified_code(stdout), get_diagnostics(stdout), stderr


def prettify_verbose(window, args):
    """Prettifies the code at the given file path and handles errors and exceptions"""

    def handle_os_error(err):
        print(err)
        if get_node_path() in err.strerror:
            msg = "Node.js was not found in the default path. Please specify the location."
            if ok_cancel_dialog(msg):
                open_sublime_settings(window)
            return None
        else:
            raise err

    def handle_output_error(err):
        print(err)
        msg = "A script error was encountered in the prettifier. Care to file a bug?"
        if ok_cancel_dialog(msg):
            open_new_tab(
                "https://github.com/victorporof/Sublime-HTMLPrettify/issues/new"
            )
        return None

    try:
        prettified_code, output_diagnostics, output_errors = prettify(args)
    except OSError as err:
        return handle_os_error(err)

    if output_diagnostics and get_pref("print_diagnostics"):
        print(output_diagnostics)

    if output_errors:
        return handle_output_error(output_errors)

    return prettified_code
